{"ast":null,"code":"var _jsxFileName = \"E:\\\\python\\\\shellovation\\\\frontend\\\\src\\\\Components\\\\CartPage\\\\CartPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartPage = () => {\n  _s();\n  const [cart, setCart] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Retrieve userId from localStorage or global state\n  const userId = localStorage.getItem('userId'); // or use a context to manage the user ID\n\n  useEffect(() => {\n    if (!userId) {\n      setError('User is not logged in');\n      return;\n    }\n\n    // Fetch cart items for the user\n    const fetchCart = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/get-cart', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId\n          }) // Send the userId to the backend\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setCart(data.cart); // Set the cart data if the response is successful\n        } else {\n          setError(data.message || 'Error fetching cart');\n        }\n      } catch (error) {\n        setError('Error fetching cart');\n      }\n    };\n    fetchCart();\n  }, [userId]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), cart ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cart.productsInCart.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Product ID: \", item.productId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Quantity: \", item.productQty]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading your cart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(CartPage, \"WDdp+tA89HhtVl5TyjctrVeInLs=\");\n_c = CartPage;\nexport default CartPage;\nvar _c;\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CartPage","_s","cart","setCart","error","setError","userId","localStorage","getItem","fetchCart","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","children","fileName","_jsxFileName","lineNumber","columnNumber","productsInCart","map","item","index","productId","productQty","_c","$RefreshReg$"],"sources":["E:/python/shellovation/frontend/src/Components/CartPage/CartPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst CartPage = () => {\r\n  const [cart, setCart] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Retrieve userId from localStorage or global state\r\n  const userId = localStorage.getItem('userId');  // or use a context to manage the user ID\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setError('User is not logged in');\r\n      return;\r\n    }\r\n\r\n    // Fetch cart items for the user\r\n    const fetchCart = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/get-cart', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ userId }), // Send the userId to the backend\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          setCart(data.cart);  // Set the cart data if the response is successful\r\n        } else {\r\n          setError(data.message || 'Error fetching cart');\r\n        }\r\n      } catch (error) {\r\n        setError('Error fetching cart');\r\n      }\r\n    };\r\n\r\n    fetchCart();\r\n  }, [userId]);\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Cart</h2>\r\n      {cart ? (\r\n        <div>\r\n          <ul>\r\n            {cart.productsInCart.map((item, index) => (\r\n              <li key={index}>\r\n                <p>Product ID: {item.productId}</p>\r\n                <p>Quantity: {item.productQty}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {/* Optionally, display total price, remove items, etc. */}\r\n        </div>\r\n      ) : (\r\n        <p>Loading your cart...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}